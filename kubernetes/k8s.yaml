apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  DATABASE_NAME: postgres #para aplicacao
  DATABASE_USER: postgres
  DATABASE_HOST: postgres
  DATABASE_PORT: "5432"
  POSTGRES_DB: postgres #para o banco
  POSTGRES_USER: postgres
  APPLICATION_PORT: "8080"
  AUTH_TOKEN_EXPIRATION: "43200"
  MP_TOKEN: "APP_USR-2512049377508546-052123-386869c4214628b0e44f44f638bc2ebe-2448858150"
  COLLECTOR_ID: "2448858150"
  POS_ID: "SUC001POS001"
  MP_BASE_URL: "https://api.mercadopago.com"

---

apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque
stringData:
  POSTGRES_PASSWORD: "P@ssw0rd"
  DATABASE_PASS: "P@ssw0rd"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  type: ClusterIP 
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: "postgres"
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:17-alpine
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: db-secret
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  name: fastfood-service
spec:
  selector:
    app: fastfood
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastfood-app
spec:
  selector:
    matchLabels:
      app: fastfood
  template:
    metadata:
      labels:
        app: fastfood
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:17-alpine
        command: ['sh', '-c', '
          echo "Aguardando o postgres ficar pronto...";
          until pg_isready -h postgres -p 5432; do
            echo "Ainda aguardando...";
            sleep 2;
          done;
          echo "Postgres est√° pronto!";']
      containers:
        - name: fastfood
          image: srteixeiradias/fastfood:latest
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: db-secret
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "2Gi"
          livenessProbe:
            httpGet:
              path: /api/actuator/health/liveness
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/actuator/health/readiness
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 5
            failureThreshold: 3

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fastfood-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fastfood-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50